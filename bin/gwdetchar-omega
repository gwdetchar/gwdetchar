#!/usr/bin/env python
# coding=utf-8
# Copyright (C) LIGO Scientific Collaboration (2015-)
#
# This file is part of the GW DetChar python package.
#
# GW DetChar is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# GW DetChar is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GW DetChar.  If not, see <http://www.gnu.org/licenses/>.

"""Compute an Omega scan for a list of channels around a given GPS time

This utility can be used to process an arbitrary list of detector channels
with minimal effort in finding data. The input should be an INI-formatted
configuration file that lists processing options and channels in contextual
blocks, e.g.:

```ini
[GW]
name = Gravitational Wave Strain
q-range = 3.3166,150
frequency-range = 4,2048
resample = 4096
frametype = H1_HOFT_C00
state-flag = H1:DMT-GRD_ISC_LOCK_NOMINAL:1
duration = 64
fftlength = 8
max-mismatch = 0.2
snr-threshold = 5
always-plot = True
plot-time-durations = 1,4,16
channels = H1:GDS-CALIB_STRAIN
```

For more information, see gwdetchar.omega.config.
"""

from __future__ import division

import os
import sys
import ast
import numpy
from scipy.signal import butter

from matplotlib import (use, rcParams)
use('agg')  # nopep8

from gwpy.utils import gprint
from gwpy.time import to_gps
from gwpy.table import EventTable
from gwpy.timeseries import TimeSeriesDict
from gwpy.detector import (Channel, ChannelList)
from gwpy.segments import (Segment, DataQualityFlag)
from gwpy.signal.qtransform import QTiling

from gwdetchar import (cli, const, __version__)
from gwdetchar.omega import (config, plot, html)

__author__ = 'Alex Urban <alexander.urban@ligo.org>'
__credits__ = 'Duncan Macleod <duncan.macleod@ligo.org>'


# -- parse command line -------------------------------------------------------

parser = cli.create_parser(description=__doc__)
parser.add_argument('gpstime', type=to_gps,
                    help='GPS time or datestring to scan')
cli.add_ifo_option(parser, required=False)
parser.add_argument('-o', '--output-directory',
                    help='output directory for the omega scan, '
                         'default: ~/public_html/wdq/{IFO}_{gpstime}')
parser.add_argument('-f', '--config-file', action='append', default=None,
                    help='path to configuration file to use, can be given '
                         'multiple times (files read in order), default: '
                         'choose a standard one based on IFO and GPS time')
parser.add_argument('-s', '--ignore-state-flags', action='store_true',
                    default=False, help='ignore state flag definitions in '
                                        'the configuration, default: False')
parser.add_argument('-t', '--far-threshold', type=float, default=1e-10,
                    help='white noise false alarm rate threshold for '
                         'processing channels, default: %(default)s Hz')
parser.add_argument('-c', '--colormap', default='viridis',
                    help='name of colormap to use, default: %(default)s')
cli.add_nproc_option(parser)
parser.add_argument('-v', '--verbose', action='store_true', default=False,
                    help='print verbose output, default: False')

args = parser.parse_args()

# get run parameters
if args.ifo:
    ifo = args.ifo
else:
    ifo = 'Network'
gps = float(args.gpstime)
far = args.far_threshold

print("----------------------------------------------\n"
      "Creating %s omega scan at GPS second %s..." % (ifo, gps))

if args.config_file is None:
    # find epoch
    epoch = const.gps_epoch(gps, default=const.latest_epoch())
    gprint('Identified epoch as %r' % epoch)

    # find and parse configuration file
    if ifo == 'Network':
        args.config_file = [os.path.expanduser(
            '~detchar/etc/omega/{epoch}/Network.ini'.format(epoch=epoch))]
    else:
        args.config_file = [os.path.expanduser(
            '~detchar/etc/omega/{epoch}/{obs}-{ifo}_R-selected.ini'.format(
                epoch=epoch, obs=ifo[0], ifo=ifo))]

# parse configuration files
args.config_file = [os.path.abspath(f) for f in args.config_file]
if args.verbose:
    gprint('Parsing the following configuration files:')
    for fname in args.config_file:
        gprint(''.join(['\t', fname]))
cp = config.OmegaConfigParser(ifo=ifo)
cp.read(args.config_file)

# prepare html variables
htmlv = {
    'title': '%s Qscan | %s' % (ifo, gps),
    'config': args.config_file,
    'refresh': True,
}

# set output directory
outdir = args.output_directory
if outdir is None:
    outdir = os.path.expanduser('~/public_html/wdq/%s_%s' % (ifo, gps))
if not os.path.isdir(outdir):
    os.makedirs(outdir)
os.chdir(outdir)
print("Output directory created as %s" % outdir)


# -- FIXME: Eventually move these classes to gwdetchar.omega ------------------

class OmegaChannel(Channel):
    def __init__(self, channelname, section, **params):
        self.name = channelname
        frametype = params.get('frametype', None)
        frange = tuple(
            [float(s) for s in params.get('frequency-range', None).split(',')]
        )
        qrange = tuple(
            [float(s) for s in params.get('q-range', None).split(',')]
        )
        mismatch = float(params.get('max-mismatch', 0.2))
        snrthresh = float(params.get('snr-threshold', 5.5))
        pranges = [int(t) for t in params.get('plot-time-durations',
                                              None).split(',')]
        always_plot = ast.literal_eval(params.get('always-plot', 'False'))
        super(OmegaChannel, self).__init__(
            channelname, frametype=frametype, frange=frange, qrange=qrange,
            mismatch=mismatch, pranges=pranges, snrthresh=snrthresh,
            always_plot=always_plot
        )
        self.plots = {}
        for plottype in ['timeseries_raw', 'timeseries_highpassed',
                         'timeseries_whitened', 'qscan_raw',
                         'qscan_whitened', 'qscan_autoscaled',
                         'eventgram_raw', 'eventgram_whitened',
                         'eventgram_autoscaled']:
            self.plots[plottype] = [get_fancyplots(self.name, plottype, t)
                                    for t in pranges]
        self.section = section
        self.params = params.copy()


class OmegaChannelList(object):
    def __init__(self, key, **params):
        self.key = key
        self.parent = params.get('parent', None)
        self.name = params.get('name', None)
        self.duration = int(params.get('duration', 32))
        self.fftlength = int(params.get('fftlength', 2))
        self.resample = int(params.get('resample', 0))
        self.source = params.get('source', None)
        self.frametype = params.get('frametype', None)
        self.flag = params.get('state-flag', None)
        chans = params.get('channels', None).strip().split('\n')
        section = self.parent if self.parent else self.key
        self.channels = [OmegaChannel(c, section, **params) for c in chans]
        self.params = params.copy()


# -- Utilities ----------------------------------------------------------------

def check_flag(flag, time, duration, pad):
    """Check that a state flag is active during an analysis segment

    Parameters
    ----------
    flag : `str`
        state flag to check
    time : `float`
        GPS time of required data
    duration : `float`
        duration (in seconds) of required data
    pad : `float`
        amount of extra data to read in at the start and end for filtering

    Returns
    -------
    check : `bool`
        Boolean switch to pass (`True`) or fail (`False`) depending on whether
        the given flag is active
    """
    # set GPS start and end time
    start = time - duration/2. - pad
    end = time + duration/2. + pad
    seg = Segment(start, end)
    # query for state segments
    active = DataQualityFlag.query(flag, start, end).active
    # check that state flag is active during the entire analysis
    if (not active.intersects_segment(seg)) or (abs(active[0]) < abs(seg)):
        return False
    return True


def get_data(channels, time, duration, pad, frametype=None, source=None,
             nproc=1, verbose=False):
    """Retrieve data for multiple channels, centered at a given time

    Parameters
    ----------
    channels : `list`
        required data channels
    time : `float`
        GPS time of required data
    duration : `float`
        duration (in seconds) of required data
    pad : `float`
        amount of extra data to read in at the start and end for filtering
    frametype : `str`, optional
        name of frametype in which this channel is stored, by default will
        search for all required frame types
    source : `str`, `list`, optional
        `str` path of a LAL-format cache file or single data file, will
        supercede `frametype` if given, defaults to `None`
    nproc : `int`, optional
        number of parallel processes to use, uses serial process by default
    verbose : `bool`, optional
        print verbose output about NDS progress, default: False

    See Also
    --------
    gwpy.timeseries.TimeSeriesDict.get
        for the underlying method to read from frames or NDS
    gwpy.timeseries.TimeSeriesDict.read
        for the underlying method to read from a local file cache
    """
    # set GPS start and end time
    start = time - duration/2. - pad
    end = time + duration/2. + pad
    # read from cache if requested
    if source:
        return TimeSeriesDict.read(source, channels, start=start, end=end,
                                   nproc=nproc)
    # else read from frames or NDS
    return TimeSeriesDict.get(channels, start, end, frametype=frametype,
                              nproc=nproc, verbose=verbose)


def get_fancyplots(channel, plottype, duration, caption=None):
    """Construct FancyPlot objects for output HTML pages

    Parameters
    ----------
    channel : `str`
        the name of the channel
    plottype : `str`
        the type of plot, e.g. 'raw_timeseries'
    duration : `str`
        duration of the plot, in seconds
    caption : `str`, optional
        a caption to render in the fancybox
    """
    plotdir = 'plots'
    chan = channel.replace('-', '_').replace(':', '-')
    filename = '%s/%s-%s-%s.png' % (plotdir, chan, plottype, duration)
    if not caption:
        caption = os.path.basename(filename)
    return html.FancyPlot(filename, caption)


def get_widths(x0, xdata):
    """Generator to get the width of 1-D rectangular tiles

    Parameters
    ----------
    x0 : `float`
        starting point of the first tile
    xdata : `array`
        center points of all tiles
    """
    for x in xdata:
        width = 2 * (x - x0)
        x0 = x + width/2
        yield width


def eventgram(time, data, search=0.5, frange=(0, numpy.inf),
              qrange=(4, 96), snrthresh=5.5, mismatch=0.2):
    """Create an eventgram with the Q-plane that has the most significant
    tile.

    Parameters
    ----------
    time : `float` or `int`
        central GPS time of the search, in seconds
    data : `TimeSeries`
        timeseries data to analyze
    search : `float`, optional
        search analysis window, will be centered at `time`
    frange : `tuple` of `float`, optional
        `(low, high)` range of frequencies to scan
    qrange : `tuple` of `float`, optional
        `(low, high)` range of Qs to scan
    snrthresh : `float`
        threshold on tile SNR, tiles quieter than this will not be included
    mismatch : `float`
        the maximum fractional mismatch between neighboring tiles

    Returns
    -------
    table : `gwpy.table.EventTable`
        an `EventTable` object containing all tiles louder than `snrthresh` on
        the Q plane with the loudest tile
    """
    # generate tilings
    planes = QTiling(abs(data.span), data.sample_rate.value, qrange=qrange,
                     frange=frange, mismatch=mismatch)

    # get frequency domain data
    fdata = data.fft().value

    # set up results
    Z = 0  # max normalized tile energy
    N = 0  # no. of independent tiles
    numplanes = 0
    qmax, qmin = qrange[1], qrange[0]
    pweight = (1 + numpy.log10(qmax/qmin)/numpy.sqrt(2))

    # Q-transform data for each `(Q, frequency)` tile
    for plane in planes:
        n_ind = 0
        numplanes += 1
        freqs, normenergies = plane.transform(fdata, epoch=data.x0)
        # find peak energy in this plane and record if loudest
        for freq, ts in zip(freqs, normenergies):
            n_ind += 1 + 2 * numpy.pi * abs(data.span) * freq / plane.q
            peak = ts.crop(time-search/2, time+search/2).value.max()
            if peak > Z:
                Z = peak
                snr = numpy.sqrt(2*Z)
                fc = freq
                ts_cropped = ts.crop(time-search/2, time+search/2)
                tc = ts_cropped.times.value[ts_cropped.value.argmax()]
                del ts_cropped
                peakplane = plane
        N += n_ind * pweight / numplanes

    # create an eventgram for the plane with the loudest tile
    energies = []
    central_times, central_freqs, durations, bandwidths = [], [], [], []
    freqs, normenergies = peakplane.transform(fdata, epoch=data.x0)
    bws = get_widths(peakplane.frange[0], freqs)
    for f, b, ts in zip(freqs, bws, normenergies):
        durs = get_widths(data.x0.value, ts.times.value)
        for t, dur, E in zip(ts.times.value, durs, ts.value):
            if E >= snrthresh**2/2:
                central_freqs.append(f)
                bandwidths.append(b)
                central_times.append(t)
                durations.append(dur)
                energies.append(E)
    table = EventTable([central_times, central_freqs, durations,
                       bandwidths, energies],
                       names=('central_time', 'central_freq', 'duration',
                              'bandwidth', 'energy'))

    # get parameters and return
    table.q = peakplane.q
    table.Z = Z
    table.snr = snr
    table.tc = tc
    table.fc = fc
    table.frange = peakplane.frange
    table.engthresh = -numpy.log(far * abs(data.span) / (1.5 * N))
    return table


# -- Compute Qscan ------------------------------------------------------------

# make subdirectories
plotdir = 'plots'
aboutdir = 'about'
datadir = 'data'
for d in [plotdir, aboutdir, datadir]:
    if not os.path.isdir(d):
        os.makedirs(d)

# set up analyzed channel dict
if sys.version_info >= (3, 7):  # python 3.7+
    blocks = {s: OmegaChannelList(s, **cp[s]) for s in cp.sections()}
    analyzed = {}
else:
    from collections import OrderedDict
    try:  # python 3.x
        blocks = OrderedDict([(s, OmegaChannelList(s, **cp[s]))
                              for s in cp.sections()])
    except:  # python 2.x
        blocks = OrderedDict([(s, OmegaChannelList(s, **dict(cp.items(s))))
                              for s in cp.sections()])
    analyzed = OrderedDict()

# set up html output
gprint('Setting up HTML at %s/index.html...' % outdir)
html.write_qscan_page(ifo, gps, analyzed, **htmlv)

# launch omega scans
gprint('Launching Omega scans...')

# range over blocks
for block in blocks.values():
    gprint('Processing block %s' % block.key)
    chans = [c.name for c in block.channels]
    # get configuration
    duration = block.duration
    fftlength = block.fftlength
    pad = max(1, fftlength/4.)
    # check that analysis flag is active for all of `duration`
    if block.flag and not args.ignore_state_flags:
        if args.verbose:
            gprint('Querying state flag %s...' % block.flag)
        if not check_flag(block.flag, gps, duration, pad):
            gprint('%s not active, skipping block' % block.flag)
            continue
    # read in `duration` seconds of data centered on gps
    data = get_data(chans, gps, duration, pad, frametype=block.frametype,
                    source=block.source, nproc=args.nproc,
                    verbose=args.verbose)
    # compute qscans
    for c in block.channels:
        if args.verbose:
            gprint('Computing omega scans for channel %s...' % c.name)

        # get raw timeseries
        series = data[c.name].astype('float64')
        if block.resample:
            series = series.resample(block.resample)

        # filter the timeseries
        corner = c.frange[0] / 1.5
        wn = 2 * corner * series.dt.decompose().value
        hpfilt = butter(12, wn, btype='highpass', analog=False, output='sos')
        hpseries = series.filter(hpfilt, filtfilt=True)
        asd = series.asd(fftlength, fftlength/2, method='lal_median_mean')
        wseries = hpseries.whiten(fftlength, fftlength/2, window='hann',
                                  asd=asd, detrend='linear')

        # crop the timeseries
        wseries = wseries.crop(gps-duration/2, gps+duration/2)
        hpseries = hpseries.crop(gps-duration/2, gps+duration/2)

        # compute eventgrams
        try:
            table = eventgram(gps, wseries, frange=c.frange, qrange=c.qrange,
                              snrthresh=c.snrthresh, mismatch=c.mismatch)
        except UnboundLocalError:
            if args.verbose:
                gprint('Channel is misbehaved, removing it from the analysis')
            del series, hpseries, wseries, asd
            continue
        if table.Z < table.engthresh and not c.always_plot:
            if args.verbose:
                gprint('Channel not significant at white noise false alarm '
                       'rate %s Hz' % far)
            del series, hpseries, wseries, asd, table
            continue
        Q = table.q
        rtable = eventgram(gps, hpseries, frange=table.frange, qrange=(Q, Q),
                           snrthresh=c.snrthresh, mismatch=c.mismatch)

        # compute Q-transform spectrograms
        outseg = Segment(gps - max(c.pranges)/2., gps + max(c.pranges)/2.)
        tres = min(c.pranges) / 500
        fres = c.frange[0] / 20
        qscan = wseries.q_transform(qrange=(Q, Q), frange=c.frange, tres=tres,
                                    fres=fres, gps=gps, search=0.25,
                                    whiten=False, outseg=outseg)
        rqscan = hpseries.q_transform(qrange=(Q, Q), frange=c.frange,
                                      tres=tres, fres=fres, gps=gps,
                                      search=0.25, whiten=False, outseg=outseg)

        # prepare plots
        if args.verbose:
            gprint('Plotting omega scans for channel %s...' % c.name)
        # work out figure size
        figsize = [8, 5]
        for span, png1, png2, png3, png4, png5, png6, png7, png8, png9 in zip(
            c.pranges, c.plots['qscan_whitened'],
            c.plots['qscan_autoscaled'], c.plots['qscan_raw'],
            c.plots['timeseries_raw'], c.plots['timeseries_highpassed'],
            c.plots['timeseries_whitened'], c.plots['eventgram_raw'],
            c.plots['eventgram_whitened'], c.plots['eventgram_autoscaled']
        ):
            # plot whitened qscan
            plot.omega_plot(qscan, gps, span, c.name, str(png1), qscan=True,
                            clim=(0, 25), colormap=args.colormap,
                            figsize=figsize)
            # plot autoscaled, whitened qscan
            plot.omega_plot(qscan, gps, span, c.name, str(png2), qscan=True,
                            colormap=args.colormap, figsize=figsize)
            # plot raw qscan
            plot.omega_plot(rqscan, gps, span, c.name, str(png3), qscan=True,
                            clim=(0, 25), colormap=args.colormap,
                            figsize=figsize)
            # plot raw timeseries
            plot.omega_plot(series, gps, span, c.name, str(png4),
                            ylabel='Amplitude', figsize=figsize)
            # plot highpassed timeseries
            plot.omega_plot(hpseries, gps, span, c.name, str(png5),
                            ylabel='Highpassed Amplitude', figsize=figsize)
            # plot whitened timeseries
            plot.omega_plot(wseries, gps, span, c.name, str(png6),
                            ylabel='Whitened Amplitude', figsize=figsize)
            # plot raw eventgram
            plot.omega_plot(rtable, gps, span, c.name, str(png7),
                            eventgram=True, clim=(0, 25),
                            colormap=args.colormap, figsize=figsize)
            # plot whitened eventgram
            plot.omega_plot(table, gps, span, c.name, str(png8),
                            eventgram=True, clim=(0, 25),
                            colormap=args.colormap, figsize=figsize)
            # plot autoscaled whitened eventgram
            plot.omega_plot(table, gps, span, c.name, str(png9),
                            eventgram=True, colormap=args.colormap,
                            figsize=figsize)

        # save parameters
        c.Q = Q
        c.energy = table.Z
        c.snr = table.snr
        c.t = table.tc
        c.f = table.fc

        # update analyzed dict
        try:
            analyzed[c.section]['channels'].append(c)
        except KeyError:
            analyzed[c.section] = {'name': blocks[c.section].name,
                                   'channels': [c]}
        htmlv['toc'] = analyzed

        # update HTML output
        html.write_qscan_page(ifo, gps, analyzed, **htmlv)

        # delete intermediate data products
        del qscan, rqscan, table, rtable, series, hpseries, wseries, asd

    # delete data
    del data


# -- Prepare HTML -------------------------------------------------------------

# write HTML page and finish
gprint('Finalizing HTML at %s/index.html...' % outdir)
htmlv['refresh'] = False  # turn off auto-refresh
if analyzed:
    html.write_qscan_page(ifo, gps, analyzed, **htmlv)
else:
    reason = 'No significant channels found during active analysis segments'
    html.write_null_page(ifo, gps, reason, **htmlv)
gprint("-- index.html written, all done --")
