#!/usr/bin/env python
# coding=utf-8
# Copyright (C) LIGO Scientific Collaboration (2015-)
#
# This file is part of the GW DetChar python package.
#
# GW DetChar is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# GW DetChar is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GW DetChar.  If not, see <http://www.gnu.org/licenses/>.

"""Find overflows associated with a particular front-end model
"""

from __future__ import print_function

import os.path

import warnings
import tqdm

from matplotlib import (use, rcParams)
use('agg')  # noqa

import h5py

import gwdatafind

from gwpy.io.cache import cache_segments
from gwpy.segments import (DataQualityFlag, DataQualityDict,
                           Segment, SegmentList)
from gwpy.utils import gprint

from gwdetchar import (cds, cli, const, daq)
from gwdetchar.io import (html as htmlio)
from gwdetchar.io.datafind import get_data
from gwdetchar.plot import get_gwpy_tex_settings
from gwdetchar.utils import table_from_segments

SITE_MAP = {
    'K1': 'KAGRA',
    'V1': 'Virgo',
}

__author__ = 'TJ Massinger <thomas.massinger@ligo.org>'
__credits__ = 'Duncan Macleod <duncan.macleod@ligo.org> ' \
              'Alex Urban <alexander.urban@ligo.org>'

parser = cli.create_parser(description=__doc__)
cli.add_gps_start_stop_arguments(parser)
cli.add_ifo_option(parser)
parser.add_argument('dcuid', type=int, nargs='+',
                    help='DCUID for the relevant front-end model')
cli.add_frametype_option(parser, required=const.IFO is None,
                         default=const.IFO is not None and '%s_R' % const.IFO)
cli.add_nproc_option(parser)
parser.add_argument('--deep', action='store_true', default=False,
                    help='perform deep scan, default: %(default)s')
parser.add_argument('-a', '--state-flag', metavar='FLAG',
                    help='restrict search to times when FLAG was active')
parser.add_argument('--nds', metavar='HOST:PORT',
                    help='use the given NDS host:port to access data, '
                         'default: use datafind')
parser.add_argument('-o', '--output-file',
                    help='path to output data file, default name will be '
                         'automatically generated based on IFO and GPS times')
parser.add_argument('-I', '--integer-segments', action='store_true',
                    default=False, help="pad all overflow segments to integer "
                                        "boundaries (default: %(default)s)")
parser.add_argument('-p', '--segment-pad', type=float, default=0.1,
                    help='minimum padding (one-sided) for output segments '
                         'when using --output-format '
                         '[segments|integer-segments]')
parser.add_argument('-s', '--segment-end-pad', type=float, default=1.0,
                    help='amount of time to remove from the end of each '
                         'analysis segment')
parser.add_argument('-m', '--html', help='path to write html output')
parser.add_argument('-v', '--plot', action='store_true', default=None,
                    help='make plots of all overflows, default: %(default)s')
parser.add_argument('-c', '--fec-map', help='URL of human-readable FEC map, '
                                            'default: infer from IFO')
parser.add_argument('-u', '--simulink', help='URL of human-readable Simulink '
                                             'model, default: infer from IFO')

args = parser.parse_args()

fec_map = args.fec_map
simulink = args.simulink
if args.ifo == 'H1':
    if not fec_map:
        fec_map = 'https://lhocds.ligo-wa.caltech.edu/exports/detchar/fec/'
    if not simulink:
        simulink = 'https://lhocds.ligo-wa.caltech.edu/daq/simulink/'
if args.ifo == 'L1':
    if not fec_map:
        fec_map = 'https://llocds.ligo-la.caltech.edu/exports/detchar/fec/'
    if not simulink:
        simulink = 'https://llocds.ligo-la.caltech.edu/daq/simulink/'

span = Segment(args.gpsstart, args.gpsend)

# set TeX settings
tex_settings = get_gwpy_tex_settings()
rcParams.update(tex_settings)

# get segments
if args.state_flag:
    state = DataQualityFlag.query(args.state_flag, int(args.gpsstart),
                                  int(args.gpsend),
                                  url=const.DEFAULT_SEGMENT_SERVER)
    tmp = type(state.active)()
    for i, seg in enumerate(state.active):
        if abs(seg) < args.segment_end_pad:
            continue
        tmp.append(type(seg)(seg[0], seg[1]-args.segment_end_pad))
    state.active = tmp.coalesce()
    statea = state.active
else:
    statea = SegmentList([span])

if not args.output_file:
    duration = abs(span)
    args.output_file = (
        '%s-OVERFLOWS-%d-%d.h5'
        % (args.ifo, int(args.gpsstart), duration))
    gprint("Set default output file as %s" % args.output_file)

# set up container
overflows = DataQualityDict()

# prepare data access
if args.nds:
    from gwpy.io import nds2 as io_nds2
    host, port = args.nds.rsplit(':', 1)
    ndsconnection = io_nds2.connect(host, port=int(port))
    if ndsconnection.get_protocol() == 1:
        cachesegs = SegmentList([Segment(int(args.gpsstart),
                                         int(args.gpsend))])
    else:
        cachesegs = io_nds2.get_availability(
            ['{0}:FEC-1_DAC_OVERFLOW_ACC_0_0'.format(args.ifo)],
            int(args.gpsstart), int(args.gpsend),
        )
else:  # get frame cache
    cache = gwdatafind.find_urls(args.ifo[0], args.frametype,
                                 int(args.gpsstart), int(args.gpsend))
    cachesegs = statea & cache_segments(cache)

flag_desc = "ADC/DAC Overflow indicated by {0}"

# get channel and find overflows
for dcuid in args.dcuid:
    gprint("Processing DCUID %d" % dcuid)
    channel = daq.ligo_accum_overflow_channel(dcuid, args.ifo)
    overflows[channel] = DataQualityFlag(channel, known=cachesegs)
    if args.deep:
        gprint("    Getting list of overflow channels...", end=' ')
        try:
            channels = daq.ligo_model_overflow_channels(
                dcuid, args.ifo, args.frametype, gpstime=span[0], nds=args.nds)
        except IndexError:  # no frame found for GPS start, try GPS end
            channels = daq.ligo_model_overflow_channels(
                dcuid, args.ifo, args.frametype, gpstime=span[-1])
        for chan in channels:  # set up flags early
            overflows[chan] = DataQualityFlag(
                chan,
                known=cachesegs,
                description=flag_desc.format(chan),
                isgood=False,
            )
        gprint("    %d channels found" % len(channel))
    for seg in cachesegs:
        gprint("    Processing {}-{}:".format(*seg))
        if args.nds:
            read_kw = dict(connection=ndsconnection)
        else:
            read_kw = dict(source=cache, nproc=args.nproc)
        msg = "        Reading ACCUM_OVERFLOW data: "
        data = get_data(
            channel, seg[0], seg[1],
            pad=0., verbose=msg, **read_kw
        )
        new = daq.find_overflow_segments(
            data,
            cumulative=True,
        )
        overflows[channel] += new
        gprint("        {} overflows found".format(len(new.active)))
        if not new.active:
            continue
        # go deep!
        for s, e in tqdm.tqdm(new.active.protract(2), unit='ovfl',
                              desc='        Going deep'):
            data = get_data(channels, s, e, **read_kw)
            for ch in channels:
                try:
                    overflows[ch] += daq.find_overflow_segments(
                        data[ch],
                        cumulative=True,
                    )
                except KeyError:
                    warnings.warn("Skipping {}".format(ch), UserWarning)
                    continue
    gprint("    Complete")

# write output
table = table_from_segments(
    overflows,
    sngl_burst=args.output_file.endswith((".xml", ".xml.gz")),
)
if args.integer_segments:
    for key in overflows:
        overflows[key] = overflows[key].round()
if args.output_file.endswith((".h5", "hdf", ".hdf5")):
    with h5py.File(args.output_file, "w") as h5f:
        table.write(h5f, path="triggers")
        overflows.write(h5f, path="segments")
else:
    table.write(args.output_file, overwrite=True)
    overflows.write(args.output_file, overwrite=True, append=True)
gprint("Written output to %s" % args.output_file)

# write HTML
if args.html:
    if args.plot:
        args.plot = os.path.dirname(args.html)
    if args.output_file:
        args.output_file = os.path.relpath(
            args.output_file, os.path.dirname(args.html))
    if os.path.basename(args.html) == 'index.html':
        page = htmlio.new_bootstrap_page(
            title='%s Overflows: %d-%d' % (
                args.ifo, int(args.gpsstart), int(args.gpsend)))
    else:
        page = htmlio.markup.page()
    page.div(class_='container')

    # -- header
    page.div(class_='page-header')
    page.h1('%s ADC/DAC Overflows: %d-%d'
            % (args.ifo, int(args.gpsstart), int(args.gpsend)))
    page.p("This analysis searched for digital-to-analogue (DAC) or "
           "analogue-to-digital (ADC) conversion overflows in the {0} "
           "real-time controls system.".format(SITE_MAP.get(args.ifo, 'LIGO')))
    if args.deep:
        page.p("A hierarchichal search was performed, with a single "
               "cumulative overflow counter checked per front-end controller "
               "(FEC); for those models that indicate an overflow, the "
               "card/slot-specific channels were then checked.")
    page.div.close()

    # -- paramters
    content = [('DCUIDs', ' '.join(map(str, args.dcuid)))]
    if fec_map:
        content.append((
            'FEC map', '<a href="{0}" target="_blank" title="{1} FEC '
                       'map">{0}</a>'.format(fec_map, args.ifo)))
    if simulink:
        content.append((
            'Simulink models', '<a href="{0}" target="_blank" title="{1} '
                               'Simulink models">{0}</a>'.format(
                                   simulink, args.ifo)))
    page.add(htmlio.write_arguments(
        content, start=args.gpsstart, end=args.gpsend, flag=args.state_flag))

    # -- segments
    page.h2('Segments')
    # link XML file
    if args.output_file:
        page.p()
        page.add('The full output segments are recorded in here:')
        page.a(os.path.basename(args.output_file), href=args.output_file,
               target='_blank')
        page.p.close()
    # print state segments
    if args.state_flag:
        page.p('This analysis was executed over the following segments:')
        page.div(class_='panel-group', id_='accordion1')
        page.add(htmlio.write_flag_html(
            state, span, 'state', parent='accordion1', context='success',
            plotdir=args.plot, facecolor=(0.2, 0.8, 0.2),
            edgecolor='darkgreen', known={
                'facecolor': 'red', 'edgecolor': 'darkred', 'height': 0.4}))
        page.div.close()
    # print overflow segments
    if sum(abs(s.active) for s in overflows.values()):
        page.p('The following channels indicated an overflow (constant '
               'overflow is yellow, otherwise red):')
        page.div(class_='panel-group', id_='accordion2')
        for i, (c, flag) in enumerate(list(overflows.items())):
            if abs(flag.active) == 0:
                continue
            if abs(flag.active) == abs(cachesegs):
                context = 'warning'
            else:
                context = 'danger'
            try:
                channel = cds.get_real_channel(flag.name)
            except Exception:
                title = '%s [%d]' % (flag.name, len(flag.active))
            else:
                title = '%s (%s) [%d]' % (flag.name, channel, len(flag.active))
            page.add(htmlio.write_flag_html(
                flag, span, i, parent='accordion2', title=title,
                context=context, plotdir=args.plot))
        page.div.close()
    else:
        page.div(class_='alert alert-info')
        page.p('No overflows were found')
        page.div.close()

    # -- results table
    page.h2('Results summary')
    page.table(class_='table table-striped table-hover')
    # write table header
    page.thead()
    page.tr()
    for header in ['Channel', 'Connected signal', 'Num. overflows']:
        page.th(header)
    page.thead.close()
    # write body
    page.tbody()
    for c, seglist in overflows.items():
        t = abs(seglist.active)
        if t == 0:
            context = 'default'
        elif t == abs(cachesegs):
            context = 'warning'
        else:
            context = 'danger'
        page.tr(class_=context)
        page.td(c)
        try:
            page.td(cds.get_real_channel(str(c)))
        except Exception:
            page.td()
        page.td(len(seglist.active))
        page.tr.close()
    page.tbody.close()
    page.table.close()

    # -- close and write
    page.add(htmlio.write_footer())
    page.div.close()
    with open(args.html, 'w') as fp:
        print(str(page), file=fp)
    gprint("HTML written to %s" % args.html)
