#!/usr/bin/env python
# coding=utf-8
# Copyright (C) LIGO Scientific Collaboration (2015-)
#
# This file is part of the GW DetChar python package.
#
# GW DetChar is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# GW DetChar is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GW DetChar.  If not, see <http://www.gnu.org/licenses/>.

"""User-friendly wrapper around the Omega-pipeline scan
"""

from __future__ import print_function

import os.path
import shutil
import sys
import subprocess
import warnings

from glue.lal import Cache

from gwpy.io.cache import cache_segments
from gwpy.time import to_gps

from gwdetchar import (cli, omega, const)
from gwdetchar.io import datafind

parser = cli.create_parser(description=__doc__)
parser.add_argument('gpstime', type=to_gps,
                    help='GPS time or datestring to scan')
cli.add_ifo_option(parser)
parser.add_argument('-o', '--output-directory',
                    help='output directory for scan, '
                         'default: ~/public_html/wdq/{IFO}_{gpstime}')
parser.add_argument(
    '-f', '--config-file',
    help='path to configuration file to use, default: '
         'choose based on observatory, epoch, and pipeline')
parser.add_argument('-w', '--wpipeline', default='gwdetchar-omega',
                    nargs='?', const=omega.WPIPELINE,
                    help='path to wpipeline binary (default: %(default)s), '
                         'can choose the Matlab version by passing this flag '
                         'with no argument')
parser.add_argument('--colormap', default=None,
                    help='name of colormap to use (supported either in Python '
                         'or in Matlab omega > r3449), default: choose based '
                         'on wpipeline')

margs = parser.add_argument_group('Matlab options')
margs.add_argument('--condor', action='store_true', default=False,
                   help='indicates this job is running under condor, '
                        'only use when running as part of a workflow')
margs.add_argument(
    '-c', '--cache-file',
    help='path to data cache file, if not given, data locations '
         'are found using the datafind server, must be in LAL cache format')

pargs = parser.add_argument_group('Python options')
pargs.add_argument('-d', '--disable-correlation', action='store_true',
                   default=False, help='disable cross-correlation of aux '
                                       'channels, default: False')
pargs.add_argument('-t', '--far-threshold', type=float, default=1e-10,
                   help='white noise false alarm rate threshold for '
                        'processing channels, default: %(default)s Hz')
pargs.add_argument('-s', '--ignore-state-flags', action='store_true',
                   default=False, help='ignore state flag definitions in '
                                       'the configuration, default: False')
cli.add_nproc_option(pargs)
pargs.add_argument('-v', '--verbose', action='store_true', default=False,
                   help='print verbose output, default: False')

args = parser.parse_args()

gps = args.gpstime
gpstime = float(gps)
ifo = args.ifo
obs = args.ifo[0]

# get absolute path to config
if args.config_file is not None:
    args.config_file = os.path.abspath(args.config_file)

# set colormap default
if not args.colormap and args.wpipeline.endswith('wpipeline'):
    args.colormap = 'parula'  # matlab
elif not args.colormap:
    args.colormap = 'viridis'  # python

# if requested, wrap around gwdetchar-omega
if 'gwdetchar-omega' in args.wpipeline:
    wpipeline = os.path.join(os.path.dirname(__file__), 'gwdetchar-omega')
    cmd = [wpipeline, '-t', str(args.far_threshold), '-j', str(args.nproc),
           '-c', args.colormap, '-i', ifo, str(gps)]
    if args.output_directory is not None:
        cmd.extend(['-o', args.output_directory])
    if args.config_file is not None:
        cmd.extend(['-f', args.config_file])
    if args.disable_correlation:
        cmd.extend(['-d'])
    if args.ignore_state_flags:
        cmd.extend(['-s'])
    if args.verbose:
        cmd.extend(['-v'])
    process = subprocess.check_call(cmd)
    sys.exit(0)

# else, wrap around the Matlab code and throw a deprecation warning
warnings.simplefilter('always', DeprecationWarning)
warnings.warn('Since the Matlab omega scan code is reaching end-of-life, '
              '`wdq` will soon be deprecated in favor of `gwdetchar-omega`. '
              'We are in the second stage of this process, where `wdq` '
              'invokes `gwdetchar-omega` by default, but users may still '
              'point to the Matlab code by passing `--wpipeline` with no '
              'arguments. Before O3, `wdq` will be removed entirely and '
              '`wdq-batch` will become `gwdetchar-omega-batch`.',
              DeprecationWarning)

print("----------------------------------------------\n"
      "Creating omega scan for %s..." % args.gpstime)

# set output directory
outdir = args.output_directory
if outdir is None:
    outdir = os.path.expanduser('~/public_html/wdq/%s_%s' % (ifo, gps))
outdir = os.path.abspath(outdir)
if not os.path.isdir(outdir):
    os.makedirs(outdir)
print("Ouput directory created as %s" % outdir)

if args.config_file is None:
    # find epoch
    epoch = const.gps_epoch(gpstime, default=const.latest_epoch())
    print("Identified epoch as %r" % epoch)

    # find and parse configuration file
    args.config_file = os.path.expanduser(
        '~detchar/etc/omega/{epoch}/{obs}-{ifo}_R-selected.txt'.format(
            epoch=epoch, obs=obs, ifo=ifo))
config = omega.OmegaChannelList.read(args.config_file)
print("Successfully parsed config file %s" % args.config_file)

# read frames from user-given cache
if args.cache_file:
    with open(args.cache_file, 'r') as f:
        cache = Cache.fromfile(f)
# find frames
else:
    padding = 1000
    cachestart = int(gpstime) - padding
    cacheend = int(gpstime) + padding
    frametypes = set(c.frametype for c in config)
    cache = Cache()
    for ft in set(c.frametype for c in config):
        cache.extend(datafind.find_frames(obs, ft, cachestart, cacheend))

cseg = cache_segments(cache).extent()
cachefile = os.path.join(
    outdir, '%s-OMEGA_CACHE_FILE-%d-%d.lcf' % (ifo, cseg[0], abs(cseg)))
datafind.write_omega_cache(cache, cachefile)
print("Cachefile written to %s" % cachefile)

# run scan
omega.run(gps, args.config_file, cachefile, outdir=outdir,
          wpipeline=args.wpipeline, colormap=args.colormap, verbose=True,
          remove_lock_on_term=args.condor)
